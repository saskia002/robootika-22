#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <SimpleKeypad.h>
#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h>
#endif

#define PIN 15 
#define NUMPIXELS 9 
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

const byte ROW_NUM = 3;
const byte COL_NUM = 3;

String playerSelf[9];
String playerOther[9];

int bannedNumbers[9];

char keys[ROW_NUM][COL_NUM] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'}
};
byte rowPins[ROW_NUM] = {16, 5, 4};
byte colPins[COL_NUM] = {0, 2, 14};

SimpleKeypad kp1((char*)keys, rowPins, colPins, ROW_NUM, COL_NUM);

IPAddress local_IP(192, 168, 4, 1);
// Set your Gateway IP address
IPAddress gateway(192, 168, 4, 254);

IPAddress subnet(255, 255, 255, 0);

extern "C" {
  #include<user_interface.h>
}
#define UDP_PORT 4210
#define udpIP "192.168.4.2"
WiFiUDP UDP;

const char *ssid = "trips-traps-trull vork";
const char *pass = "123456789";
char packet[255];
char reply[]="uugabuuga received!"; 
bool pause = false;



void setup() {
  WiFi.config(local_IP, gateway, subnet);
  delay(100);
  Serial.begin(115200);
  Serial.println();
  Serial.print("Configuring access point...");
  
  WiFi.softAP(ssid,pass);
  
  Serial.print("AP IP address: ");
  Serial.println(WiFi.localIP());
  UDP.begin(UDP_PORT);
  Serial.print("Listening on UDP port ");
  Serial.println(UDP.remotePort());


  #if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
    clock_prescale_set(clock_div_1);
  #endif
  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)
  pixels.setBrightness(100);

}

void testAndSend(char key){
  UDP.beginPacket(udpIP, 161);
  UDP.write(key);
  UDP.endPacket();
  String newKey = (String)key;
  int newVal = newKey.toInt();
  addToBanned(newVal);
  pause = true;
}
void inBannedNumbers(char k){
  
  String newK = (String)k;
  int test = newK.toInt();
  int inArray = 0;
  for(int i=0; i < 9; i++){
      if (bannedNumbers[i] == test){
        Serial.print("Number is banned");
        inArray++;
      }
    }
    Serial.print(inArray);
    if(inArray <1){
      testAndSend(k);
    }
    
}


void addToBanned(int value){
  bannedNumbers[value-1] = value;
  for(int i=0; i<9; i++){
    Serial.print(bannedNumbers[i]);
  }
}

void turnOnLed(int nLed){
  
    // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255
    // Here we're using a moderately bright green color:
    
    pixels.setPixelColor(nLed-1, pixels.Color(150, 150, 150));

    pixels.show();   // Send the updated pixel colors to the hardware.

    delay(500); // Pause before next pass through loop
  
}

void readForPacket(){
  int packetSize = UDP.parsePacket();
  if (packetSize) {
    Serial.print("Received packet! Size: ");
    Serial.println(packetSize);
    pause = false;
    int len = UDP.read(packet, 255);
  if (len > 0)
  {
    packet[len] = '\0';
  }
  String muutuja = (String)packet;
  if(muutuja == "7"){
    Serial.println("Saine seitsme");
  }
  addToBanned(muutuja.toInt());
  Serial.print("Packet received: ");
  Serial.print(muutuja);
  turnOnLed(muutuja.toInt());
  Serial.print("!");
  Serial.println(len);
}
}

void loop() {
  //delay(2000);
  while (pause == true){
    readForPacket();
  }
  while(pause == false){
    char key = kp1.getKey();
    delay(50);
    if(key){
      Serial.println(key);
      inBannedNumbers(key);
    }
  }
}


  
