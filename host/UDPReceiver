#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <SimpleKeypad.h>

const byte ROW_NUM = 3;
const byte COL_NUM = 3;

char keys[ROW_NUM][COL_NUM] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'}
};
byte rowPins[ROW_NUM] = {16, 5, 4};
byte colPins[COL_NUM] = {0, 2, 14};

SimpleKeypad kp1((char*)keys, rowPins, colPins, ROW_NUM, COL_NUM);

IPAddress local_IP(192, 168, 4, 1);
// Set your Gateway IP address
IPAddress gateway(192, 168, 4, 254);

IPAddress subnet(255, 255, 255, 0);

extern "C" {
  #include<user_interface.h>
}
#define UDP_PORT 4210
#define udpIP "192.168.4.2"
WiFiUDP UDP;

const char *ssid = "trips-traps-trull vork";
const char *pass = "123456789";
char packet[256];
char reply[]="uugabuuga received!"; 

void setup() {
  bool pause = false;
  WiFi.config(local_IP, gateway, subnet);
  delay(100);
  Serial.begin(115200);
  Serial.println();
  Serial.print("Configuring access point...");
  
  WiFi.softAP(ssid,pass);
  
  Serial.print("AP IP address: ");
  Serial.println(WiFi.localIP());
  UDP.begin(UDP_PORT);
  Serial.print("Listening on UDP port ");
  Serial.println(UDP.remotePort());

}

void testAndSend(char key){
  UDP.beginPacket(udpIP, 161);
  UDP.write(key);
  UDP.endPacket();
  pause = true;
}
void readForPacket(){
  int packetSize = UDP.parsePacket();
  if (packetSize) {
    Serial.print("Received packet! Size: ");
    Serial.println(packetSize);
    int len = UDP.read(packet, 255);
  if (len > 0)
  {
    packet[len] = '\0';
  }
  Serial.print("Packet received: ");
  Serial.println(packet);
  pause = false;
}
}

void loop() {
  //delay(2000);
  while (pause == true){
    readForPacket();
  }
  while( pause == false){
    char key = kp1.getKey();
    if(key){
      Serial.println(key);
      testAndSend(key);
    }
  }
  /*UDP.beginPacket(udpIP, 161);
  UDP.write(reply);
  UDP.endPacket();
  int packetSize = UDP.parsePacket();
  if (packetSize) {
  Serial.print("Received packet! Size: ");
  Serial.println(packetSize);
  int len = UDP.read(packet, 255);
  if (len > 0)
  {
    packet[len] = '\0';
  }
  Serial.print("Packet received: ");
  Serial.println(packet);

  // Send return packet
  UDP.beginPacket(udpIP, 161);
  UDP.write(reply);
  UDP.endPacket();

  }*/
}


  
